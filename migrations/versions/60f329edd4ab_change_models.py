"""Change models

Revision ID: 60f329edd4ab
Revises: 814f4c1ef58d
Create Date: 2024-06-21 18:33:32.289544

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = '60f329edd4ab'
down_revision: Union[str, None] = '814f4c1ef58d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def constraint_exists(table_name, constraint_name):
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    constraints = [c['name'] for c in inspector.get_foreign_keys(table_name)]
    return constraint_name in constraints


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE TYPE role as ENUM('admin', 'moderator', 'user')")
    if constraint_exists('comments', 'comments_photo_id_fkey'):
        op.drop_constraint('comments_photo_id_fkey', 'comments', type_='foreignkey')

    op.create_table('images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('image_tags',
    sa.Column('image_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('image_id', 'tag_id')
    )

    if constraint_exists('comments', 'comments_photo_id_fkey'):
        op.drop_constraint('comments_photo_id_fkey', 'comments', type_='foreignkey')
    if constraint_exists('photo_tags', 'photo_tags_photo_id_fkey'):
        op.drop_constraint('photo_tags_photo_id_fkey', 'photo_tags', type_='foreignkey')
    op.drop_table('photos')
    op.drop_table('photo_tags')
    op.add_column('comments', sa.Column('image_id', sa.Integer(), nullable=False))
    if constraint_exists('comments', 'comments_photo_id_fkey'):
        op.drop_constraint('comments_photo_id_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'images', ['image_id'], ['id'])
    op.drop_column('comments', 'photo_id')
    op.alter_column('users', 'role', type_=sa.Enum('admin', 'moderator', 'user', name='role'), postgresql_using='role::text::role')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('photos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='photos_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='photos_pkey')
    )
    op.alter_column('users', 'role', type_=sa.VARCHAR(length=20))
    op.add_column('comments', sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint('comments_image_id_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key('comments_photo_id_fkey', 'comments', 'photos', ['photo_id'], ['id'])
    op.drop_column('comments', 'image_id')
    op.create_table('photo_tags',
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], name='photo_tags_photo_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='photo_tags_tag_id_fkey'),
    sa.PrimaryKeyConstraint('photo_id', 'tag_id', name='photo_tags_pkey')
    )
    op.execute('DROP TYPE role')
    op.drop_table('image_tags')
    op.drop_table('images')
    # ### end Alembic commands ###
