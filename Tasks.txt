Аутентифікація

1) Створюємо механізм аутентифікації. Використовуємо JWT токени++++++++
2) Користувачі мають три ролі. Звичайний користувач, модератор, та адмінстратор. Перший користувач в системі завжди адміністратор+++
3) Для реалізації різних рівнів доступу (звичайний користувач, модератор і адміністратор) ми можемо використовувати декоратори FastAPI для перевірки токена і ролі користувача.++++++

Робота с світлинами
a) Створити файли images.py в директоріях repository та routes++++
б) Створити файли tags.py в директоріях repository та routes++++

1) Користувачі можуть завантажувати світлини з описом (POST).

    а) написати функцію upload_image для завантаження фото в файл images.py в директорії repository+++
    б) написати функцію upload_image для завантаження фото в файл images.py в директорії routes+++++

2) Користувачі можуть видаляти світлини (DELETE).

    а) написати функцію delete_image для видалення фото в файл images.py в директорії repository
    б) написати функцію delete_image для видалення фото в файл images.py в директорії routes
    в) Виконувати верифікацію користувача при написанні функції. Користувач може видаляти тільки свої фото

3) Користувачі можуть редагувати опис світлини (PUT).

    а) написати функцію edit_description для редагування опису фото в файл images.py в директорії repository
    б) написати функцію edit_description для редагування опису фото в файл images.py в директорії routes
    в) Виконувати верифікацію користувача при написанні функції. Користувач може редагувати опис тільки своїх фото

4) Користувачі можуть отримувати світлину за унікальним посиланням (GET).

    а) написати функцію get_image для отримання фото в файл images.py в директорії repository
    б) написати функцію get_image для отримання фото в файл images.py в директорії routes

5) Можливість додавати до 5 тегів під світлину. Додавання тегу не обов'язкове при завантаженні світлини.
6)Теги унікальні для всього застосунку. Тег передається на сервер по імені. Якщо такого тега не існує, то він створюється, якщо існує, то для світлини береться існуючий тег з такою назвою.

    а) Написати функцію create_tag для свторення нового тегу в директорії repository
        для роутера створювати цю функцію непотрібно. Вона викликатиметься функцією add_tag
    б) написати функцію add_tag для додавання тегу в файл tags.py в директорії repository
    в) написати функцію add_tag для додавання тегу в файл tags.py в директорії routes
    г) Виконувати верифікацію користувача при написанні функції. Користувач може додавати теги тільки до своїх фото
    д) Виконувати перевірку існування тегу. 
    е) У випадку існування - додавати тег до фото.
    є) У випадку, якщо тег не існує - створити новий викликом функції create_tag, потім додати

7) Користувачі можуть виконувати базові операції над світлинами, які дозволяє сервіс Cloudinary (https://cloudinary.com/documentation/image_transformations). 
    Можливо вибрати обмежений набір трансформацій над світлинами для свого застосунку з Cloudinary.
    
    а) тут я поки хз, треба дослідити уважніше Cloudinary

8) Користувачі можуть створювати посилання на трансформоване зображення для перегляду світлини в вигляді URL та QR-code (https://pypi.org/project/qrcode/). 
    Операція POST, оскільки створюється окреме посилання на трансформоване зображення, яке зберігається в базі даних

    a) тут я поки теж хз.

9) Створені посилання зберігаються на сервері і через мобільний телефон ми можемо відсканувати QR-code та побачити зображення

    а) ну то вже після реалізації попередніх двох пунктів

10) Адміністратори можуть робить всі CRUD операції зі світлинами користувачів

    а) треба подумати, як то реалізувати. Поки як варіант прописати окремо функції з адмінським доступом


Коментування

1) Під кожною світлиною, є блок з коментарями. Користувачі можуть коментувати світлину один одного

2) Користувач може редагувати свій коментар, але не видаляти
3) Адміністратори та модератори можуть видаляти коментарі.
4)Для коментарів обов'язково зберігати час створення та час редагування коментаря в базі даних. 
    Для реалізації функціональності коментарів, ми можемо використовувати відношення "один до багатьох" між світлинами і коментарями в базі даних. 
    Для тимчасового маркування коментарів, використовувати стовпці "created_at" і "updated_at" у таблиці коментарів.